service: serverless-aurora
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: go1.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:ListBucket"
          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
          Resource:
            Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - "Ref" : "ServerlessDeploymentBucket"
                - "/*"
        - Effect: "Allow"
          Action:
            - "rds:*"
            - "application-autoscaling:DeleteScalingPolicy"
            - "application-autoscaling:DeregisterScalableTarget"
            - "application-autoscaling:DescribeScalableTargets"
            - "application-autoscaling:DescribeScalingActivities"
            - "application-autoscaling:DescribeScalingPolicies"
            - "application-autoscaling:PutScalingPolicy"
            - "application-autoscaling:RegisterScalableTarget"
            - "cloudwatch:DescribeAlarms"
            - "cloudwatch:GetMetricStatistics"
            - "cloudwatch:PutMetricAlarm"
            - "cloudwatch:DeleteAlarms"
            - "ec2:DescribeAccountAttributes"
            - "ec2:DescribeAvailabilityZones"
            - "ec2:DescribeCoipPools"
            - "ec2:DescribeInternetGateways"
            - "ec2:DescribeLocalGatewayRouteTablePermissions"
            - "ec2:DescribeLocalGatewayRouteTables"
            - "ec2:DescribeLocalGatewayRouteTableVpcAssociations"
            - "ec2:DescribeLocalGateways"
            - "ec2:DescribeSecurityGroups"
            - "ec2:DescribeSubnets"
            - "ec2:DescribeVpcAttribute"
            - "ec2:DescribeVpcs"
            - "ec2:GetCoipPoolUsage"
            - "sns:ListSubscriptions"
            - "sns:ListTopics"
            - "sns:Publish"
            - "logs:DescribeLogStreams"
            - "logs:GetLogEvents"
            - "outposts:GetOutpostInstanceTypes"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "pi:*"
          Resource: "arn:aws:pi:*:*:metrics/rds/*"
        - Effect: "Allow"
          Action:
            - "iam:CreateServiceLinkedRole"
          Resource: "*"
          Condition:
            StringLike: 
              iam:AWSServiceName: 
                - "rds.amazonaws.com"
                - "rds.application-autoscaling.amazonaws.com"
        - Effect: "Allow"
          Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "logs:DescribeLogGroups"
            - "logs:DescribeLogStreams"
            - "logs:GetLogEvents"
            - "logs:FilterLogEvents"
          Resource: "*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  patterns:
    - "!./**"
    - ./functions/**

functions:
  - ${file(./sls/functions.yml)}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
